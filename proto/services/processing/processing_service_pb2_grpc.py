# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto.messages.meteo import meteo_messages_pb2 as proto_dot_messages_dot_meteo_dot_meteo__messages__pb2
from proto.services.processing import processing_service_pb2 as proto_dot_services_dot_processing_dot_processing__service__pb2


class ProcessingServiceStub(object):
    """ProcessingService is used to process the meteorological data
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessMeteoData = channel.unary_unary(
                '/meteo.ProcessingService/ProcessMeteoData',
                request_serializer=proto_dot_messages_dot_meteo_dot_meteo__messages__pb2.RawMeteoData.SerializeToString,
                response_deserializer=proto_dot_services_dot_processing_dot_processing__service__pb2.AirWellnessCoefficient.FromString,
                )
        self.ProcessPollutionData = channel.unary_unary(
                '/meteo.ProcessingService/ProcessPollutionData',
                request_serializer=proto_dot_messages_dot_meteo_dot_meteo__messages__pb2.RawPollutionData.SerializeToString,
                response_deserializer=proto_dot_services_dot_processing_dot_processing__service__pb2.PollutionCoefficient.FromString,
                )


class ProcessingServiceServicer(object):
    """ProcessingService is used to process the meteorological data
    """

    def ProcessMeteoData(self, request, context):
        """Process meteorological data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessPollutionData(self, request, context):
        """Process pollution data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProcessingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessMeteoData': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessMeteoData,
                    request_deserializer=proto_dot_messages_dot_meteo_dot_meteo__messages__pb2.RawMeteoData.FromString,
                    response_serializer=proto_dot_services_dot_processing_dot_processing__service__pb2.AirWellnessCoefficient.SerializeToString,
            ),
            'ProcessPollutionData': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessPollutionData,
                    request_deserializer=proto_dot_messages_dot_meteo_dot_meteo__messages__pb2.RawPollutionData.FromString,
                    response_serializer=proto_dot_services_dot_processing_dot_processing__service__pb2.PollutionCoefficient.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'meteo.ProcessingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProcessingService(object):
    """ProcessingService is used to process the meteorological data
    """

    @staticmethod
    def ProcessMeteoData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/meteo.ProcessingService/ProcessMeteoData',
            proto_dot_messages_dot_meteo_dot_meteo__messages__pb2.RawMeteoData.SerializeToString,
            proto_dot_services_dot_processing_dot_processing__service__pb2.AirWellnessCoefficient.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessPollutionData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/meteo.ProcessingService/ProcessPollutionData',
            proto_dot_messages_dot_meteo_dot_meteo__messages__pb2.RawPollutionData.SerializeToString,
            proto_dot_services_dot_processing_dot_processing__service__pb2.PollutionCoefficient.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
